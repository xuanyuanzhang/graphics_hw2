#version 330

layout (location=0) in vec3 position;
layout (location=1) in vec2 texCoord;
layout (location=2) in vec3 vertexNormal;

out vec3 frontColor;
out vec2 outTexCoord;

struct Attenuation
{
    float constant;
    float linear;
    float exponent;
};

struct PointLight
{
    vec3 colour;
    // Light position is assumed to be in view coordinates
    vec3 position;
    float intensity;
    Attenuation att;
};

struct DirectionalLight
{
    vec3 colour;
    vec3 direction;
    float intensity;
};

struct Material
{
    vec3 colour;
    int useColour;
    float reflectance;
};

uniform vec3 ambientLight;
uniform float specularPower;
uniform Material material;
uniform PointLight pointLight;
uniform DirectionalLight directionalLight;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

vec3 calcLightColour(vec3 light_colour, float light_intensity, vec3 position, vec3 to_light_dir, vec3 normal)
{
    vec3 diffuseColour = vec3(0,0,0);
    vec3 specColour = vec3(0,0,0);

    // Diffuse Light
    float diffuseFactor = max(dot(normal, to_light_dir), 0.0);
    diffuseColour = light_colour * light_intensity * diffuseFactor;

    // Specular Light
    vec3 camera_direction = normalize(-position.xyz);
    vec3 from_light_dir = -to_light_dir;
    vec3 reflected_light = normalize(reflect(from_light_dir , normal));

	if (diffuseFactor>0)
	{
	    float specularFactor = max( dot(camera_direction, reflected_light), 0.0);
		specularFactor = pow(specularFactor, specularPower);
		specColour = light_intensity  * specularFactor * material.reflectance * light_colour;
	}
	
    return (diffuseColour + specColour);
}//complete (might need to add .xyz after camera_direction)

vec3 calcPointLight(PointLight light, vec3 position, vec3 normal)
{
    vec3 light_direction = light.position - position;
    vec3 to_light_dir  = normalize(light_direction);
    vec3 light_colour = calcLightColour(light.colour, light.intensity, position, to_light_dir, normal);

    // Apply Attenuation
    float distance = length(light_direction);
    float attenuationInv = light.att.constant + light.att.linear * distance +
        light.att.exponent * distance * distance;
    return light_colour / attenuationInv;
}

vec3 calcDirectionalLight(DirectionalLight light, vec3 position, vec3 normal)
{
    return calcLightColour(light.colour, light.intensity, position, normalize(light.direction), normal);
}

void main()
{
	vec3 mvVertexNormal = normalize(modelViewMatrix * vec4(vertexNormal, 0.0)).xyz;
    vec3 mvVertexPos = (modelViewMatrix * vec4(position, 1.0)).xyz;
	
    frontColor = ambientLight;
	frontColor += calcDirectionalLight(directionalLight, mvVertexPos, mvVertexNormal);
	frontColor += calcPointLight(pointLight, mvVertexPos, mvVertexNormal);
	
	outTexCoord = texCoord;
	
	gl_Position = projectionMatrix * (modelViewMatrix * vec4(position, 1.0));
}